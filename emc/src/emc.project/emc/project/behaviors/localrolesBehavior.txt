========================================================
 borg.area : Collaborative workspaces for the masses
========================================================
    
    by Martin Aspeli <optilude@gmx.net>

This product is based on b-org, and only runs on Plone 3. It depends on
the borg.localrole package.

Place these packages in your PYTHONPATH or install them into a buildout or
a workingenv, and then use Plone's Add-on product configuration to install.

With borg.area, you can create a folder in the portal with:

 - a number of users assigned as managers, given a local Manager role
 
 - a number of users assigned as team members, given a local TeamMember role
 
 - a custom workflow, as specified by a CMFPlacefulWorkflow policy
 
 - an explicitly managed list of addable content types
 
The default version of the area workflow contains states for content
being published, visible only to team members, or completely private.

Setting up a new area
------------------------

First, we need to add a few members

    >>> from Products.CMFCore.utils import getToolByName
    >>> membership = getToolByName(self.portal, 'portal_membership')

    >>> membership.addMember('member1', 'secret', ('Member',), ())
    >>> membership.addMember('member2', 'secret', ('Member',), ())
    >>> membership.addMember('member3', 'secret', ('Member',), ())
    >>> membership.addMember('member4', 'secret', ('Member',), ())
    >>> membership.addMember('member5', 'secret', ('Member',), ())
    >>> membership.addMember('member6', 'secret', ('Member',), ())

and a group, with a single member

    >>> groups = getToolByName(self.portal, 'portal_groups')
    >>> _ = groups.addGroup('group1')
    >>> _ = groups.addPrincipalToGroup('member4', 'group1')

We need to be the a manager to create the area workspace.

    >>> self.loginAsPortalOwner()

The UberMultiSelectionWidget in plone/app/form/widgets requires that the
addform's schema.List fields each has a  default value that is iterable.
(i.e list, tuple, set etc.) 

    >>> from zope.publisher.browser import TestRequest


We can now create the area object. Will simulate what happens in the
add form here, by setting the relevant properties on a newly created object,
calling _finishConstruction() on its FTI to finalise workflow creation, and
send the IObjectCreatedEvent event.
tips:obj.__ac_local_roles__ return the obj all local roles
Notice how managers and members are lists of user ids.

    >>> from zope.component import createObject
    >>> from eisoo.behaviors.reviewers import IReviewers,IReviewersMarker
    >>> from borg.localrole.interfaces import ILocalRoleProvider
    >>> from zope.interface import alsoProvides
    >>> area1 = createObject(u"eisoo.operation.areamanaged")


    >>> area1.id = 'area1'
    >>> area1.title = "area 1"
    >>> area1.description = "A first area"
    >>> IReviewers(area1).responsible_person = ('member1', 'member2',)
    >>> IReviewers(area1).bussiness_person = ('member1', 'member2',)
    >>> IReviewers(area1).product_manager = ('member1', 'member2',)
    >>> IReviewers(area1).channel_charger = ('member1', 'member2',)
    >>> IReviewers(area1).support_charger = ('member1', 'member4',)
    >>> from zope.component import provideUtility    


Workflow policies are obtained from a vocabulary. The default vocabulary
simply returns a particular policy which is installed at setup time.



Addable types are from another vocabulary, which should include any
globally allowed types.

    
There is also a method to get default values for the addable types field.
This gives back all globally allowed types with Owner in the list of roles
for their add permissions.


Now let us finish construction and fire those events.

    >>> from zope.event import notify
    >>> from zope.lifecycleevent import ObjectCreatedEvent,ObjectModifiedEvent
    >>> try:
    ...     from zope.container.contained import ObjectAddedEvent, notifyContainerModified
    ... except ImportError:
    ...     pass # We are in Plone3 land
    >>> notify(ObjectCreatedEvent(area1))

    >>> new_id = self.portal._setObject('area1', area1)
    >>> area1 = self.portal._getOb(new_id)
    >>> if hasattr(area1.getTypeInfo(), '_finishConstruction'):
    ...     _ = area1.getTypeInfo()._finishConstruction(area1)

With this, the area is properly constructed. Let us verify that the
local policy is in place.

    
And that our members have the appropriate roles

    >>> acl_users = getToolByName(self.portal, 'acl_users')

This user is a manager only.

    >>> member1 = acl_users.getUserById('member1')
    >>> 'Manager' in member1.getRolesInContext(area1)
    True
    
This user is a manager and a member.
    
    >>> member2 = acl_users.getUserById('member2')
    >>> 'Manager' in member2.getRolesInContext(area1)
    True

    
This user is a member only.
    


This user is associated by way of the group.



This user has no association with the group.


    
Finally, let us verify that the permission management has worked. The key
here is that users with the TeamMember role should be able to add the types
we explicitly defined, but no other types.

The two managers can add other content, though.

    >>> self.login('member1')
    >>> area1.invokeFactory('eisoo.operation.areamanaged', 'd1')
    'd1'

Users who get added later should be able to see documents immediately.
That does not always work out of the box with local roles

    >>> from zope.lifecycleevent import ObjectModifiedEvent
    >>> IReviewers(area1).responsible_person = IReviewers(area1).responsible_person + ('member6',)
    >>> self.login('member6')
    >>> catalog = getToolByName(self.portal, 'portal_catalog')
    >>> len(catalog(id='d1'))
    0
