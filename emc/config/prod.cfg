
[buildout]

parts +=
    zeoserver
    client1
    client2
    atcontenttypes-conf
    varnish-build
    varnish-instance
    poundbuild
    configpound    
    supervisor
    precompile
    chown
    unifiedinstaller
    logrotate.conf
    backup
    backup-daily
    backup-weekly
    
extensions = mr.developer buildout.dumppickedversions
dump-picked-versions-file = versionslastprod.cfg
overwrite-picked-versions-file = true 
extends = 
    base.cfg
     ../packages.cfg



[zeoserver]
# Use this section to install and configure a Zope
# Enterprise Objects server.
# For options see http://pypi.python.org/pypi/plone.recipe.zeoserver
recipe = plone.recipe.zeoserver
zeo-address = ${buildout:zeo-address}
# if we try to start as root, Zope will switch to the user below
effective-user = ${buildout:effective-user}
# Put the log, pid and socket files in var/zeoserver
zeo-log     = ${buildout:directory}/var/zeoserver/zeoserver.log
pid-file    = ${buildout:directory}/var/zeoserver/zeoserver.pid
socket-name = ${buildout:directory}/var/zeoserver/zeo.zdsock
blob-storage = ${buildout:directory}/var/blobstorage

[client1]
# Use this section to install and configure a Zope
# client instance.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2instance

recipe = plone.recipe.zope2instance
zeo-client = true
z2-log-level = ERROR
event-log-level = ERROR
zeo-address = ${zeoserver:zeo-address}
# The line below sets only the initial password. It will not change an
# existing password.
user = ${buildout:user}
# if we try to start as root, Zope will switch to the user below
effective-user = ${buildout:effective-user}
http-address = ${buildout:http-address}
blob-storage = ${zeoserver:blob-storage}
shared-blob = on
# change debug-mode to "on" to run in development mode
debug-mode = ${buildout:debug-mode}
# change verbose-security to "on" for detailed security
# errors while developing
verbose-security = ${buildout:verbose-security}
deprecation-warnings = ${buildout:deprecation-warnings}
# Put the log, pid, lock files in var/client1
event-log = ${buildout:directory}/var/client1/event.log
z2-log    = ${buildout:directory}/var/client1/Z2.log
pid-file  = ${buildout:directory}/var/client1/client1.pid
lock-file = ${buildout:directory}/var/client1/client1.lock


# If you want Zope to know about any additional eggs, list them here.
# e.g. eggs = ${buildout:eggs} my.package
eggs =    

    ${eggs:main}

environment-vars =

    zope_i18n_allowed_languages zh_CN zh_TW en zh 
    zope_i18n_compile_mo_files false


[client2]
# a copy of client1, except adjusted address and var location
<= client1
http-address = ${buildout:client2-address}
event-log = ${buildout:directory}/var/client2/event.log
z2-log    = ${buildout:directory}/var/client2/Z2.log
pid-file  = ${buildout:directory}/var/client2/client2.pid
lock-file = ${buildout:directory}/var/client2/client2.lock


[chown-zeo]
# This recipe is used to set permissions for root mode installs
# For options see http://pypi.python.org/pypi/plone.recipe.command
recipe = plone.recipe.command
command =echo Dummy references to force this to execute after referenced parts
    echo ${backup:location} ${unifiedinstaller:sudo-command}
    chmod 600 .installed.cfg
    touch ${buildout:directory}/var/zeoserver/zeoserver.log
    find ${buildout:directory}/var -type d -exec chmod 700 {} \;
    chmod 744 ${buildout:directory}/bin/*
update-command = ${chown-zeo:command}


# self define parts
[atcontenttypes-conf]
recipe = plone.recipe.atcontenttypes
zope-instance-location = 
                        ${client1:location}
                        ${client2:location}
max-file-size          = ATImage:1mb
                             ATFile:10mb
                             ATNewsItem:500kb
max-image-dimension    = ATNewsItem:640,400
                             ATImage:1024,1024

[varnish-instance]
recipe = plone.recipe.varnish
mode = foreground 
daemon = ${buildout:directory}/parts/varnish-build/sbin/varnishd
bind = 127.0.0.1:${buildout:varnish-address}
backends =
        127.0.0.1:${buildout:pound-address}
cache-size = 1G
user = ${client1:effective-user}
connect-timeout = 1.5s

[varnish-build]
recipe = zc.recipe.cmmi
url = http://repo.varnish-cache.org/source/varnish-2.1.5.tar.gz
#url = http://repo.varnish-cache.org/source/varnish-3.0.3.tar.gz
[configpound]
recipe = plone.recipe.pound:config
executable = /usr/sbin/pound
timeout = 88
log_level = 0
daemon = 0
balancers =
        one  127.0.0.1:${buildout:pound-address} 127.0.0.1:${buildout:client1-address}  127.0.0.1:${buildout:client2-address}

[poundbuild]
recipe = plone.recipe.pound:build
url = http://www.apsis.ch/pound/Pound-2.6.tgz
#url = http://www.apsis.ch/pound/Pound-2.3.2.tgz

[supervisor]
# http://pypi.python.org/pypi/collective.recipe.supervisor
recipe = collective.recipe.supervisor
user = admin
password = t0me5857+
logfile-maxbytes = 30
logfile-backups = 2
loglevel = error 
plugins = superlance
#supervisord-conf = ${buildout:directory}/etc/supervisord.conf
programs =
    10 zeoserver    ${zeoserver:location}/bin/runzeo    ${zeoserver:location}
    20 client1    ${buildout:directory}/bin/client1 [console] true ${client1:effective-user}
    30 client2    ${buildout:directory}/bin/client2 [console] true ${client1:effective-user}
    40 pound        ${buildout:directory}/bin/poundrun ${buildout:directory}  true 
    50 varnish      ${buildout:directory}/bin/varnish-instance  ${buildout:directory}  true 
eventlisteners =
    HttpOk TICK_60 ${buildout:bin-directory}/httpok [-p site1 -t 20 http://localhost:8081/]
    Memmon TICK_60 ${buildout:bin-directory}/memmon [-p client1=400MB]
    
[logrotate.conf]
recipe = zc.recipe.deployment:configuration
text =
    rotate 4
    weekly
    create
    compress
    delaycompress
    ${buildout:directory}/var/log/instance1*.log {
        sharedscripts
        postrotate
            /bin/kill -USR2 $(cat ${buildout:directory}/var/client1/client1.pid)
        endscript
    }
    ${buildout:directory}/var/log/instance2*.log {
        sharedscripts
        postrotate
            /bin/kill -USR2 $(cat ${buildout:directory}/var/client2/client2.pid)
        endscript
    }
    ${buildout:directory}/var/log/zeoserver.log {
        postrotate
            /bin/kill -USR2 $(cat ${buildout:directory}/var/zeoserver/zeoserver.pid)
        endscript
    }


# compiles .py files in ./parts and ./products so that they don't
# need to be compiled by the daemon
# For options see http://pypi.python.org/pypi/plone.recipe.precompiler
[precompile]
recipe = plone.recipe.precompiler


# This recipe is used to set permissions -- and ownership for root mode installs
# For options see http://pypi.python.org/pypi/plone.recipe.command
[chown]
recipe = plone.recipe.command
command =chmod 600 .installed.cfg
    touch ${buildout:directory}/var/zeoserver/zeoserver.log
    chmod 700 ${buildout:directory}/var/filestorage
    chmod 700 ${buildout:directory}/var/zeoserver
    chmod 700 ${buildout:directory}/var/client?
update-command = ${chown:command}


# This recipe installs the plonectl script and a few other convenience
# items.
# For options see http://pypi.python.org/pypi/plone.recipe.unifiedinstaller
[unifiedinstaller]
recipe = plone.recipe.unifiedinstaller
user = ${client1:user}
primary-port = ${client1:http-address}
sudo-command = 


# This recipe builds the backup, restore and snapshotbackup commands.
# For options see http://pypi.python.org/pypi/collective.recipe.backup
[backup]
recipe = collective.recipe.backup
location = ${buildout:backups-dir}/backups
snapshotlocation = ${buildout:backups-dir}/snapshotbackups
[backup-daily]
recipe = z3c.recipe.usercrontab
times = 0 4 * * 0-6
command = ${buildout:directory}/bin/backup

[backup-weekly]
recipe = z3c.recipe.usercrontab
times = 0 4 * * 7
command = ${buildout:directory}/bin/zeopack  && ${buildout:directory}/bin/backup

